import java.util.*;

class Dijkstra {
static int Findminval(int dist[],boolean visited[], int n){
    int minval = Integer.MAX_VALUE;
    int index = -1;

    for (int i= 0 ; i< n; i++){
        if (!visited[i] && dist[i] < minval ){
            minval = dist[i];
            index = i;
        }
    }

    return index;

}
static void DijkstraAlgo(int mat[][],int startV,int n )  {
    int dist[] = new int[n];
    boolean visited[] = new boolean[n];

    Arrays.fill(dist,Integer.MAX_VALUE);
    Arrays.fill(visited,false);
    dist[startV] = 0;

    for (int i = 0; i<n;i++){
        int minidx = Findminval(dist, visited, n);
        visited[minidx] = true;
        // after including the vertex changn the values
        for (int j= 0; j < n; j++){
            if (!visited[j] && mat[minidx][j] != 0 && dist[minidx] != Integer.MAX_VALUE
            && dist[minidx] + mat[minidx][j] < dist[j]){
            
                dist[j] = dist[minidx] + mat[minidx][j];


            }

            
        }
        
    }
    for (int i = 0 ; i < n ; i++){
      System.out.println(i+"\t"+dist[i]);          
    }
}  
public static void main(String args[]){
Scanner sc = new Scanner(System.in);
System.out.println("Enter the number of vertex :");
int n = sc.nextInt();
int[][] mat = new int[n][n];
System.out.println("ENter Matrix");

for (int i =0; i<n;i++){
    for (int j=0; j<n; j++){
        mat[i][j] = sc.nextInt();
    }
}

DijkstraAlgo(mat,0,n);





sc.close();
}


}
