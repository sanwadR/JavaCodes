import java.util.*;
public class FloydWarshall {
    final static int INF = Integer.MAX_VALUE;

    public static void FloydWarshallAlgo(int[][] mat, int n){
        int[][] graph = new int[n][n];

        for(int i= 0;i<n;i++){
            for(int j=0;j<n;j++){

                graph[i][j] = mat[i][j];

            }
        }

        for(int k =0;k<n;k++){
            for(int i=0;i<n;i++){
                for(int j=0; j<n; j++){
                    if (graph[i][k] != INF && graph[k][j] != INF) { // Avoid integer overflow
                        graph[i][j] = Math.min(graph[i][j], graph[i][k] + graph[k][j]);
                    }
                }
            }

        }

        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if (graph[i][j] == INF) {
                    System.out.print("INF ");
                } else {
                    System.out.print(graph[i][j] + "   ");
                }
            }
            System.out.println();
        }

        
    }
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the number of vertices");
        int n = sc.nextInt();
        System.err.println("Enter the adajcency matrix (use"+INF+" For infinity):");
        int[][] mat = new int[n][n];
        for(int i= 0 ; i<n;i++){
            for(int j = 0;j<n;j++){
                mat[i][j]= sc.nextInt();
            }
        }

        FloydWarshallAlgo(mat,n);
        sc.close();
    }

    
}
